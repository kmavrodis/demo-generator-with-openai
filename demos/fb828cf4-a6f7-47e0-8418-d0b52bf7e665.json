{"id": "fb828cf4-a6f7-47e0-8418-d0b52bf7e665", "use_case": "Plant identification and caring advice", "detailed_description": "### Demo Description: Plant Identification and Sickness Recommendation\n\n#### Main Features of the Demo:\n- **Plant Identification**: Users can upload an image of a plant, and the system will identify the plant species.\n- **Sickness Detection**: The system will analyze the uploaded plant image to detect any signs of sickness or disease.\n- **Recommendation System**: Based on the detected sickness, the system will provide care or treatment recommendations.\n\n#### User Interface Elements:\n- **Image Upload Section**: Users can upload an image of a plant.\n- **Identification Results**: Display the identified plant species and relevant information.\n- **Sickness Analysis Results**: Display any detected sicknesses and associated symptoms.\n- **Recommendation Section**: Provide treatment or care recommendations based on the analysis.\n\n#### Data Processing Steps:\n1. **Image Upload**: User uploads an image of a plant.\n2. **Image Analysis**: Use the Azure OpenAI Chat API with image analysis to identify the plant species and detect any signs of sickness.\n3. **Text Generation**:\n   - Generate a summary of the plant species and any sickness symptoms detected.\n   - Generate care or treatment recommendations based on the sickness detected.\n4. **Display Results**: \n   - Show the identified plant species and relevant information.\n   - Display detected sickness symptoms.\n   - Provide treatment or care recommendations.\n\n#### Instructions for the Engineer:\n- **Visual Elements**: Make use of Streamlit's image display and text display functionalities. Include placeholders for identification results, sickness analysis, and recommendations.\n- **Dummy Data**: Use dummy data for plant species, sickness symptoms, and recommendations to demonstrate functionality before integrating with Azure APIs.\n- **Interactivity**: Ensure the interface is user-friendly with clear instructions for image upload and result interpretation.", "code": "import streamlit as st\nimport requests\nimport os\nimport base64\nfrom openai import AzureOpenAI\nfrom PIL import Image\nimport io\n\n# Ensuring necessary packages are installed\ndef install_packages():\n    packages = [\"streamlit\", \"requests\", \"openai\", \"Pillow\"]\n    for package in packages:\n        try:\n            __import__(package)\n        except ImportError:\n            os.system(f'pip install {package}')\n\ninstall_packages()\n\n# Set up Streamlit app title and description\nst.title(\"Plant Identification and Sickness Recommendation\")\nst.write(\"Upload an image of a plant to identify the species, detect any sickness, and receive care or treatment recommendations.\")\n\n# Set up the image upload section\nuploaded_file = st.file_uploader(\"Upload a plant image\", type=[\"jpg\", \"jpeg\", \"png\"])\n\n# Display the uploaded image\nif uploaded_file is not None:\n    image = Image.open(uploaded_file)\n    st.image(image, caption=\"Uploaded Plant Image\", use_column_width=True)\n\n    # Convert image to base64 to send to Azure\n    if image.mode == 'RGBA':\n        image = image.convert('RGB')\n    buffered = io.BytesIO()\n    image.save(buffered, format=\"JPEG\")\n    img_str = base64.b64encode(buffered.getvalue()).decode()\n\n    # Define API interaction\n    client = AzureOpenAI(\n        api_key=os.getenv(\"OPENAI_API_KEY\"),\n        api_version=\"2023-12-01-preview\",\n        azure_endpoint=os.getenv(\"OPENAI_ENDPOINT\")\n    )\n\n    image_completion = client.chat.completions.create(\n        model=os.getenv(\"OPENAI_DEPLOYMENT_NAME\"),\n        messages=[\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a helpful assistant and can describe images and identify plants.\",\n            },\n            {\n                \"role\": \"user\",\n                \"content\": [\n                    {\"type\": \"text\", \"text\": \"Identify the plant and detect any sickness.\"},\n                    {\"type\": \"image_url\", \"image_url\": {\"url\": f\"data:image/jpeg;base64,{img_str}\"}}\n                ]\n            }\n        ],\n    )\n\n    # Process Azure response\n    identification_results = image_completion.choices[0].message.content\n\n    # Displaying identification results\n    st.subheader(\"Identification Results\")\n    st.write(identification_results)\n\n    # Generating care or treatment recommendations based on sickness detection\n    recommendation_completion = client.chat.completions.create(\n        model=os.getenv(\"OPENAI_DEPLOYMENT_NAME\"),\n        messages=[\n            {\n                \"role\": \"system\",\n                \"content\": \"Based on the identified sickness, provide care or treatment recommendations for the plant.\",\n            },\n            {\n                \"role\": \"user\",\n                \"content\": identification_results\n            }\n        ],\n    )\n\n    recommendations = recommendation_completion.choices[0].message.content\n\n    # Displaying sickness analysis and recommendations\n    st.subheader(\"Sickness Analysis Results\")\n    st.write(identification_results)  # Displaying the part of the analysis related to sickness\n\n    st.subheader(\"Recommendations\")\n    st.write(recommendations)\n\nelse:\n    st.write(\"Please upload an image of a plant to get started.\")"}