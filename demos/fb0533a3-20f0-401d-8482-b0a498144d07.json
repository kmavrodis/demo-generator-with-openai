{"id": "fb0533a3-20f0-401d-8482-b0a498144d07", "use_case": "Email classification system", "detailed_description": "### Demo Description: Email Classification System\n\n#### Main Features of the Demo\n- **Email Ingestion**: Users can upload emails in text format for classification.\n- **Classification**: Categorizes emails into predefined categories (e.g., Spam, Promotions, Social, Primary).\n- **Sentiment Analysis**: Analyzes the sentiment of the email content (positive, negative, neutral).\n- **Summary Generation**: Generates a brief summary of the email content.\n\n#### User Interface Elements\n- **File Upload**: Button to upload email text files.\n- **Email Display**: Text area to display the content of the uploaded email.\n- **Category Display**: Label to show the classified category of the email.\n- **Sentiment Display**: Label to show the sentiment of the email.\n- **Summary Display**: Text area to show the generated summary.\n- **Charts/Graphs**: Visualization of the distribution of categorized emails (using Plotly).\n\n#### Data Processing Steps\n1. **File Upload**:\n   - User uploads an email text file.\n2. **Text Extraction**:\n   - Extract text content from the uploaded file.\n3. **Classification**:\n   - Use Azure OpenAI Chat API to classify the email into predefined categories.\n4. **Sentiment Analysis**:\n   - Use Azure OpenAI Chat API for sentiment analysis of the email content.\n5. **Summary Generation**:\n   - Generate a summary of the email using Azure OpenAI Chat API.\n6. **Visualization**:\n   - Update charts to reflect the classification distribution using dummy data for additional context.\n\n**Note to the Engineer**: Ensure the UI is intuitive and visually appealing. Include dummy data for charts to demonstrate functionality.", "code": "import streamlit as st\nfrom openai import AzureOpenAI\nimport os\nimport json\nimport plotly.express as px\nimport pandas as pd\nimport base64\n\n# Import checks and installation if necessary\ntry:\n    import openai\nexcept ImportError:\n    import os\n    os.system('pip install openai')\n\ntry:\n    import plotly.express as px\nexcept ImportError:\n    import os\n    os.system('pip install plotly')\n\n# Setting up OpenAI client\nclient = AzureOpenAI(\n    api_key=os.getenv(\"OPENAI_API_KEY\"),\n    api_version=\"2023-12-01-preview\",\n    azure_endpoint=os.getenv(\"OPENAI_ENDPOINT\")\n)\n\n# Function to classify email content\ndef classify_email(text):\n    response = client.chat.completions.create(\n        model=os.getenv(\"OPENAI_DEPLOYMENT_NAME\"),\n        messages=[{\"role\": \"user\", \"content\": f\"Classify the following email: {text}\"}]\n    )\n    return response.choices[0].message.content.strip()\n\n# Function to analyze sentiment\ndef analyze_sentiment(text):\n    response = client.chat.completions.create(\n        model=os.getenv(\"OPENAI_DEPLOYMENT_NAME\"),\n        messages=[{\"role\": \"user\", \"content\": f\"Analyze the sentiment of the following email: {text}\"}]\n    )\n    return response.choices[0].message.content.strip()\n\n# Function to generate summary\ndef generate_summary(text):\n    response = client.chat.completions.create(\n        model=os.getenv(\"OPENAI_DEPLOYMENT_NAME\"),\n        messages=[{\"role\": \"user\", \"content\": f\"Generate a summary for the following email: {text}\"}]\n    )\n    return response.choices[0].message.content.strip()\n\n# Dummy data for visualization\ndef create_dummy_data():\n    data = {\n        'Category': ['Spam', 'Promotions', 'Social', 'Primary'],\n        'Count': [20, 35, 15, 30]\n    }\n    return pd.DataFrame(data)\n\n# Sample emails\nsample_emails = [\n    \"Dear user, your account has been suspended due to suspicious activity. Please verify your account by clicking the link below.\",\n    \"Hi there! Check out the latest offers on our store. Get up to 50% off on selected items. Visit now!\",\n    \"Hey, just wanted to let you know about our next meetup this Friday! Hope to see you there.\",\n    \"Dear Customer, your recent purchase has been successfully processed. Thank you for shopping with us.\"\n]\n\n# Streamlit Interface\nst.title(\"Email Classification System\")\n\nst.text(\"Paste an email below to classify it, analyze its sentiment, and generate a summary. Use the buttons for sample emails.\")\n\nif 'email_content' not in st.session_state:\n    st.session_state['email_content'] = sample_emails[0]\n\ndef set_sample_email(index):\n    st.session_state.email_content = sample_emails[index]\n\nst.button(\"Sample 1\", on_click=set_sample_email, args=(0,))\nst.button(\"Sample 2\", on_click=set_sample_email, args=(1,))\nst.button(\"Sample 3\", on_click=set_sample_email, args=(2,))\nst.button(\"Sample 4\", on_click=set_sample_email, args=(3,))\n\nemail_content = st.text_area(\"Content of the Email\", st.session_state.email_content, height=200)\n\n# Classify the email\ncategory = classify_email(email_content)\nst.header(\"Email Category\")\nst.write(f\"Category: {category}\")\n\n# Analyze sentiment\nsentiment = analyze_sentiment(email_content)\nst.header(\"Sentiment Analysis\")\nst.write(f\"Sentiment: {sentiment}\")\n\n# Generate summary\nsummary = generate_summary(email_content)\nst.header(\"Email Summary\")\nst.text_area(\"Summary of the Email\", summary, height=100)\n\n# Visualization of categorized emails\nst.header(\"Email Categories Distribution\")\ndf = create_dummy_data()\nfig = px.pie(df, values='Count', names='Category', title='Email Categories Distribution')\nst.plotly_chart(fig)"}